arguments: align_dataset_mtcnn.py ./images/ ./cropped/
--------------------
tensorflow version: 2.6.0
--------------------
git hash: b'd395de786888ab155c6fa79c35090b1646ae4ab9'
--------------------
b'diff --git a/align_dataset_mtcnn.py b/align_dataset_mtcnn.py\nindex cf09f4a..00636f6 100644\n--- a/align_dataset_mtcnn.py\n+++ b/align_dataset_mtcnn.py\n@@ -52,8 +52,8 @@ def main(args):\n     print(\'Creating networks and loading parameters\')\n     \n     with tf.Graph().as_default():\n-        gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=args.gpu_memory_fraction)\n-        sess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options, log_device_placement=False))\n+        gpu_options = tf.compat.v1.GPUOptions(per_process_gpu_memory_fraction=args.gpu_memory_fraction)\n+        sess = tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(gpu_options=gpu_options, log_device_placement=False))\n         with sess.as_default():\n             pnet, rnet, onet = detect_face.create_mtcnn(sess, None)\n     \ndiff --git a/cropped/ben/1.png b/cropped/ben/1.png\ndeleted file mode 100644\nindex d74de7b..0000000\nBinary files a/cropped/ben/1.png and /dev/null differ\ndiff --git a/cropped/ben/2.png b/cropped/ben/2.png\ndeleted file mode 100644\nindex fede477..0000000\nBinary files a/cropped/ben/2.png and /dev/null differ\ndiff --git a/cropped/ben/3.png b/cropped/ben/3.png\ndeleted file mode 100644\nindex f1cf721..0000000\nBinary files a/cropped/ben/3.png and /dev/null differ\ndiff --git a/cropped/bounding_boxes_03559.txt b/cropped/bounding_boxes_03559.txt\ndeleted file mode 100644\nindex a3c1166..0000000\n--- a/cropped/bounding_boxes_03559.txt\n+++ /dev/null\n@@ -1,6 +0,0 @@\n-./cropped\\ben\\1.png 149 86 481 542\n-./cropped\\ben\\2.png 39 18 187 202\n-./cropped\\ben\\3.png 315 83 753 668\n-./cropped\\henry\\1.png 39 17 177 196\n-./cropped\\henry\\2.png 47 36 172 192\n-./cropped\\henry\\3.png 145 85 459 490\ndiff --git a/cropped/henry/1.png b/cropped/henry/1.png\ndeleted file mode 100644\nindex eae5914..0000000\nBinary files a/cropped/henry/1.png and /dev/null differ\ndiff --git a/cropped/henry/2.png b/cropped/henry/2.png\ndeleted file mode 100644\nindex 8cf5398..0000000\nBinary files a/cropped/henry/2.png and /dev/null differ\ndiff --git a/cropped/henry/3.png b/cropped/henry/3.png\ndeleted file mode 100644\nindex 34ae8b8..0000000\nBinary files a/cropped/henry/3.png and /dev/null differ\ndiff --git a/cropped/revision_info.txt b/cropped/revision_info.txt\ndeleted file mode 100644\nindex d7e0df1..0000000\n--- a/cropped/revision_info.txt\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-arguments: align_dataset_mtcnn.py ./images ./cropped\n---------------------\n-tensorflow version: 1.11.0\n---------------------\n-git hash: b\'d42f070ac4b60b3620561d60b7b268e9225db60d\'\n---------------------\n-b\'\'\n\\ No newline at end of file\ndiff --git a/detect_face.py b/detect_face.py\nindex 7f98ca7..f22195f 100644\n--- a/detect_face.py\n+++ b/detect_face.py\n@@ -29,7 +29,8 @@ from __future__ import print_function\n from six import string_types, iteritems\n \n import numpy as np\n-import tensorflow as tf\n+import tensorflow.compat.v1 as tf\n+tf.disable_v2_behavior()\n #from math import floor\n import cv2\n import os\n@@ -82,13 +83,13 @@ class Network(object):\n         session: The current TensorFlow session\n         ignore_missing: If true, serialized weights for missing layers are ignored.\n         """\n-        data_dict = np.load(data_path, encoding=\'latin1\').item() #pylint: disable=no-member\n+        data_dict = np.load(data_path, encoding=\'latin1\', allow_pickle=True).item() #pylint: disable=no-member\n \n         for op_name in data_dict:\n-            with tf.variable_scope(op_name, reuse=True):\n+            with tf.compat.v1.variable_scope(op_name, reuse=True):\n                 for param_name, data in iteritems(data_dict[op_name]):\n                     try:\n-                        var = tf.get_variable(param_name)\n+                        var = tf.compat.v1.get_variable(param_name)\n                         session.run(var.assign(data))\n                     except ValueError:\n                         if not ignore_missing:\n@@ -122,7 +123,7 @@ class Network(object):\n \n     def make_var(self, name, shape):\n         """Creates a new TensorFlow variable."""\n-        return tf.get_variable(name, shape, trainable=self.trainable)\n+        return tf.compat.v1.get_variable(name, shape, trainable=self.trainable)\n \n     def validate_padding(self, padding):\n         """Verifies that the padding is one of the supported ones."""\n@@ -150,7 +151,7 @@ class Network(object):\n         assert c_o % group == 0\n         # Convolution for a given input and kernel\n         convolve = lambda i, k: tf.nn.conv2d(i, k, [1, s_h, s_w, 1], padding=padding)\n-        with tf.variable_scope(name) as scope:\n+        with tf.compat.v1.variable_scope(name) as scope:\n             kernel = self.make_var(\'weights\', shape=[k_h, k_w, c_i // group, c_o])\n             # This is the common-case. Convolve the input without any further complications.\n             output = convolve(inp, kernel)\n@@ -165,7 +166,7 @@ class Network(object):\n \n     @layer\n     def prelu(self, inp, name):\n-        with tf.variable_scope(name):\n+        with tf.compat.v1.variable_scope(name):\n             i = int(inp.get_shape()[-1])\n             alpha = self.make_var(\'alpha\', shape=(i,))\n             output = tf.nn.relu(inp) + tf.multiply(alpha, -tf.nn.relu(-inp))\n@@ -182,7 +183,7 @@ class Network(object):\n \n     @layer\n     def fc(self, inp, num_out, name, relu=True):\n-        with tf.variable_scope(name):\n+        with tf.compat.v1.variable_scope(name):\n             input_shape = inp.get_shape()\n             if input_shape.ndims == 4:\n                 # The input is spatial. Vectorize it first.\n@@ -194,7 +195,7 @@ class Network(object):\n                 feed_in, dim = (inp, input_shape[-1].value)\n             weights = self.make_var(\'weights\', shape=[dim, num_out])\n             biases = self.make_var(\'biases\', [num_out])\n-            op = tf.nn.relu_layer if relu else tf.nn.xw_plus_b\n+            op = tf.nn.relu_layer if relu else tf.compat.v1.nn.xw_plus_b\n             fc = op(feed_in, weights, biases, name=name)\n             return fc\n \n@@ -210,7 +211,7 @@ class Network(object):\n         max_axis = tf.reduce_max(target, axis, keepdims=True)\n         target_exp = tf.exp(target-max_axis)\n         normalize = tf.reduce_sum(target_exp, axis, keepdims=True)\n-        softmax = tf.div(target_exp, normalize, name)\n+        softmax = tf.compat.v1.div(target_exp, normalize, name)\n         return softmax\n     \n class PNet(Network):\n@@ -277,16 +278,16 @@ def create_mtcnn(sess, model_path):\n     if not model_path:\n         model_path,_ = os.path.split(os.path.realpath(__file__))\n \n-    with tf.variable_scope(\'pnet\'):\n-        data = tf.placeholder(tf.float32, (None,None,None,3), \'input\')\n+    with tf.compat.v1.variable_scope(\'pnet\'):\n+        data = tf.compat.v1.placeholder(tf.float32, (None,None,None,3), \'input\')\n         pnet = PNet({\'data\':data})\n         pnet.load(os.path.join(model_path, \'det1.npy\'), sess)\n-    with tf.variable_scope(\'rnet\'):\n-        data = tf.placeholder(tf.float32, (None,24,24,3), \'input\')\n+    with tf.compat.v1.variable_scope(\'rnet\'):\n+        data = tf.compat.v1.placeholder(tf.float32, (None,24,24,3), \'input\')\n         rnet = RNet({\'data\':data})\n         rnet.load(os.path.join(model_path, \'det2.npy\'), sess)\n-    with tf.variable_scope(\'onet\'):\n-        data = tf.placeholder(tf.float32, (None,48,48,3), \'input\')\n+    with tf.compat.v1.variable_scope(\'onet\'):\n+        data = tf.compat.v1.placeholder(tf.float32, (None,48,48,3), \'input\')\n         onet = ONet({\'data\':data})\n         onet.load(os.path.join(model_path, \'det3.npy\'), sess)\n         \ndiff --git a/images/ben/1.jpg b/images/ben/1.jpg\ndeleted file mode 100644\nindex 3a9aeaa..0000000\nBinary files a/images/ben/1.jpg and /dev/null differ\ndiff --git a/images/ben/2.jpg b/images/ben/2.jpg\ndeleted file mode 100644\nindex 6638411..0000000\nBinary files a/images/ben/2.jpg and /dev/null differ\ndiff --git a/images/ben/3.jpg b/images/ben/3.jpg\ndeleted file mode 100644\nindex 536205f..0000000\nBinary files a/images/ben/3.jpg and /dev/null differ\ndiff --git a/images/henry/1.jpg b/images/henry/1.jpg\ndeleted file mode 100644\nindex 646c3ce..0000000\nBinary files a/images/henry/1.jpg and /dev/null differ\ndiff --git a/images/henry/2.jpg b/images/henry/2.jpg\ndeleted file mode 100644\nindex 3460953..0000000\nBinary files a/images/henry/2.jpg and /dev/null differ\ndiff --git a/images/henry/3.jpg b/images/henry/3.jpg\ndeleted file mode 100644\nindex 6859a73..0000000\nBinary files a/images/henry/3.jpg and /dev/null differ\ndiff --git a/path_dict.p b/path_dict.p\nindex d3d5047..f6e469d 100644\nBinary files a/path_dict.p and b/path_dict.p differ'